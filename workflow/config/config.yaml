dataset:
  root_dir: "/projectnb/nphfnirs/s/datasets/Interactive_Walking_HD" # where your BIDS data lives
  derivatives_subfolder: "cedalion"  # where to save results. Saves as: derivatives/cedalion/
  subject: ["01", "02", "03", "04", "05", "06", "07", "08"] # subject IDs you want to include. DO NOT INCL EXCLUDED SUBS
  task: ["STS"] # task list. Currently only do ONE task at a time.                  
  run: ["01"]   # number of runs for this task. 

preprocess:
  steps:
    median_filter:  # process your data with a median filter
      enable: true
      order: 1

    prune:
      enable: false  # false, does not update timeseries but does return mask. false=weighted group average  # FIXME: have enable mean enable (mask created or not) and then add another flag for controlling timeseries
      snr_thresh: 5
      sd_thresh:
        - "1 mm"
        - "45 mm"  
      amp_thresh:
        - 1e-3
        - 0.84
      perc_time_clean_thresh: 0.6  # for sci x psp mask
      sci_threshold: 0.6
      psp_threshold: 0.1
      window_length: "5 second"  # for both sci and psp
      flag_use_sci: true
      flag_use_psp: false

    int2od:
      enable: true

    calc_slope_b4:   # calc slope before correction applied to od
      enable: true

    calc_gvtd_b4:  # calc gvtd before correction applied to od
      enable: true

    tddr:  # NOTE: can do other MA techniques instead. ie. splineSG, PCA_recurse, wavelet, 
      enable: true

    calc_slope_after:
      enable: true

    calc_gvtd_after:
      enable: true

    freq_filter:  # filter your data with a bandpass, hpf, or lpf
      enable: true
      fmin: "0.01 Hz"  # set to 0 if you want a LPF
      fmax: "0.5 Hz"   # set to 0 if you want a HPF

    od2conc:
      enable: true

    plot_dqr:
      enable: true

hrf_estimation:   
  stim_lst: ["STS_Q"]  # list of stims from events.tsv you want to estimate the HRF of
  t_pre: "2 second"   # time before stim onset you want to model 
  t_post: "35 second" # time after stim onset you want to model
  rec_str: "conc"   # conc or od_corrected  - what you want to block average
  GLM:        
   enable: true  # if true do GLM, false do block averaging
   do_drift: false  # if true, does normal drift correction, false does not
   do_drift_legendre: true
   do_short_sep: true
   drift_order: 3
   distance_threshold: "20 mm"
   short_channel_method : "mean"
   noise_model: "arirls"
   t_delta: "1 second"
   t_std: "1 second"


groupaverage:
  mse:    # for changing bad values IDed in prune channels mask. change vals for conc or od
   mse_amp_thresh: 1e-3 
   mse_val_for_bad_data: "1e7 micromolar**2"
   mse_min_thresh: "1e0 micromolar**2"
   blockaverage_val: "0 micromolar**2"
  # mse:  # od
  #  mse_val_for_bad_data: 1e1
  #  mse_min_thresh: 1e-6
  #  blockaverage_val: 0
   
   
image_recon:   # need to create sensitivity matrix first. Not included here yet.
  mag:   
    enable: false  # perform image recon on magnitude of HRF averaged between time window (t_win)
    t_win: [5, 15]
  DIRECT: 
    enable: false  # true = direct, false = indirect
  Cmeas: 
    enable: true
  BRAIN_ONLY:      # reconstruct brain only OR scalp and brain
    enable: false
  spatial_basis:           
    enable: false 
    mask_threshold: -2
    threshold_brain: "1 mm"
    threshold_scalp: "5 mm"
    sigma_brain: "1 mm"
    sigma_scalp: "5 mm"
  mse:  # od   - for changing bad values IDed in prune channels mask
    mse_amp_thresh: 1e-3 #1.1e-6
    mse_val_for_bad_data: 1e1
    mse_min_thresh: 1e-6
    hrf_val: 0
  probe_dir: "/projectnb/nphfnirs/s/datasets/Interactive_Walking_HD/derivatives/cedalion/probe/"
  snirf_name_probe: "fullhead_56x144_NN22_System1.snirf"
  head_model: 'ICBM152'
  alpha_meas: 1e4
  alpha_spatial: 1e-3
  spectrum: 'prahl'


  
  
  
  
  
  
  